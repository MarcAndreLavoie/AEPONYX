/*******************************************************************************
 * © 2017 Mentor Graphics Corporation, A Siemens Business.  All Rights Reserved.
 *
 * THIS SOFTWARE OR FILE ("Software") CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION THAT IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION ("Mentor Graphics") OR ITS LICENSORS, AND IS SUBJECT TO LICENSE TERMS.  If you have a signed license agreement with Mentor Graphics or a Mentor Graphics subsidiary for the product(s) with which this Software will be used, your use of this Software is subject to the scope of license and the software protection and security provisions of that agreement.  If you do not have such a signed agreement, your use is subject to Mentor Graphics’ standard End-User License Agreement ("EULA"), which may be viewed at http://www.mentor.com/terms_conditions/enduser.
 *
 * DISCLAIMER:  NOTWITHSTANDING ANYTHING TO THE CONTRARY IN YOUR SIGNED LICENSE AGREEMENT OR THE EULA, THIS SOFTWARE IS PROVIDED "AS IS" WITH ALL FAULTS AND WITH:
 *
 * (A)          NO WARRANTY OF ANY KIND, express, implied or statutory, including any implied warranties of merchantability or fitness for a particular purpose, which Mentor Graphics disclaims to the maximum extent permitted by applicable law; and
 *
 * (B)          NO INDEMNIFICATION FOR INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS.
 *
 * LIMITATION OF LIABILITY:  Because this Software is provided "AS IS", NEITHER MENTOR GRAPHICS NOR ITS LICENSORS SHALL BE LIABLE FOR ANY DAMAGES WHATSOEVER IN CONNECTION WITH THE SOFTWARE OR ITS USE.  Without limiting the foregoing, in no event will Mentor Graphics or its licensors be liable for indirect, special, incidental, or consequential damages (including lost profits or savings) whether based on contract, tort (including negligence), strict liability, or any other legal theory, even if Mentor Graphics or its licensors have been advised of the possibility of such damages.  THE FOREGOING LIMITATIONS SHALL APPLY TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW.
 *
 * Unless otherwise agreed in writing, Mentor Graphics has no obligation to support or otherwise maintain Software.
 *******************************************************************************/
 /*******************************************************************************
 * Macro Name: GetLabel_Coord_Property
 * Creator: Karen Lujan 
 *
 * Revision History: Version 1.0
 * 22 Nov 2017	Generated by L-Edit
 *******************************************************************************/
#include <cstdlib>
#include <cstdarg>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>

#include <string>

#define EXCLUDE_LEDIT_LEGACY_UPI

#include <ldata.h>
/* Begin -- Uncomment this block if you are using L-Comp. */
#include <lcomp.h>
/* End */


extern "C" {
	void GetLabel_Coord_Property(void);
	int UPI_Entry_Point(void);
}

void GetLabel_Coord_Property(void)
{
	LCell	pCell	=	LCell_GetVisible();
//	LFile	pFile	=	LCell_GetFile(pCell);
	LWindow pWindow = LWindow_GetVisible();
	LC_InitializeStateFromCell(pCell);
	if(Assigned(pWindow) && (LWindow_GetType(pWindow) == CELL_BROWSER))
		pCell = LWindow_GetCell(pWindow);
	if(NotAssigned(pCell))	
	{
		LUpi_LogMessage( "ERROR: No active cell.  Please open a cell to run macro.\n" );
		LDialog_AlertBox("ERROR: No active cell.  Please open a cell to run macro.");
		return;
	}
	
	char sLabelName[MAX_CELL_NAME];
	LPoint pLabelLocation;
	LLayer pLayer;
	char sLayerName[MAX_LAYER_NAME];
	double dAngle;
	
	//Looping through all the labels in the current cell
	for(LLabel pLabel = LLabel_GetList(pCell); pLabel; pLabel =  LLabel_GetNext(pLabel))
	{
		LLabel_GetName( pLabel, sLabelName, MAX_CELL_NAME );
		LUpi_LogMessage(LFormat("LabelName = %s | ", sLabelName));
		pLabelLocation = LLabel_GetPosition( pLabel );
		LUpi_LogMessage(LFormat("Location = (%lf, %lf) | ", LC_InMicrons(pLabelLocation.x), LC_InMicrons(pLabelLocation.y)));
		pLayer = LLabel_GetLayer( pLabel );
		LLayer_GetName( pLayer, sLayerName, sizeof( sLayerName ) );
		LUpi_LogMessage(LFormat("Layer = %s\n", sLayerName));

		// Get First Property and check if it is Angle
		if (LEntity_PropertyExists((LEntity)pLabel, "Angle") == LStatusOK)
		{
			if(LEntity_GetPropertyValue((LEntity)pLabel, "Angle", &dAngle, sizeof(double)) == LStatusOK)
			{
				LUpi_LogMessage(LFormat("Angle = %lf\n", dAngle));
			}	
			else
				LUpi_LogMessage("Angle GetPropertyValue failed\n");
		}		
		else
		{
				LUpi_LogMessage("Angle property not found\n");
		}
	}
}

int UPI_Entry_Point(void)
{
	LMacro_BindToMenuAndHotKey_v9_30("Tools", "F2" /*hotkey*/, "Get Label Coord and Property", "GetLabel_Coord_Property", NULL /*hotkey category*/);
	return 1;
}
